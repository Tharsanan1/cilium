// SPDX-License-Identifier: Apache-2.0
// Copyright Authors of Cilium

// Code generated by lister-gen. DO NOT EDIT.

package v2

import (
	v2 "github.com/cilium/cilium/pkg/k8s/apis/cilium.io/v2"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BackendTrafficPolicyLister helps list BackendTrafficPolicies.
// All objects returned here must be treated as read-only.
type BackendTrafficPolicyLister interface {
	// List lists all BackendTrafficPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v2.BackendTrafficPolicy, err error)
	// BackendTrafficPolicies returns an object that can list and get BackendTrafficPolicies.
	BackendTrafficPolicies(namespace string) BackendTrafficPolicyNamespaceLister
	BackendTrafficPolicyListerExpansion
}

// backendTrafficPolicyLister implements the BackendTrafficPolicyLister interface.
type backendTrafficPolicyLister struct {
	indexer cache.Indexer
}

// NewBackendTrafficPolicyLister returns a new BackendTrafficPolicyLister.
func NewBackendTrafficPolicyLister(indexer cache.Indexer) BackendTrafficPolicyLister {
	return &backendTrafficPolicyLister{indexer: indexer}
}

// List lists all BackendTrafficPolicies in the indexer.
func (s *backendTrafficPolicyLister) List(selector labels.Selector) (ret []*v2.BackendTrafficPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v2.BackendTrafficPolicy))
	})
	return ret, err
}

// BackendTrafficPolicies returns an object that can list and get BackendTrafficPolicies.
func (s *backendTrafficPolicyLister) BackendTrafficPolicies(namespace string) BackendTrafficPolicyNamespaceLister {
	return backendTrafficPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BackendTrafficPolicyNamespaceLister helps list and get BackendTrafficPolicies.
// All objects returned here must be treated as read-only.
type BackendTrafficPolicyNamespaceLister interface {
	// List lists all BackendTrafficPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v2.BackendTrafficPolicy, err error)
	// Get retrieves the BackendTrafficPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v2.BackendTrafficPolicy, error)
	BackendTrafficPolicyNamespaceListerExpansion
}

// backendTrafficPolicyNamespaceLister implements the BackendTrafficPolicyNamespaceLister
// interface.
type backendTrafficPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BackendTrafficPolicies in the indexer for a given namespace.
func (s backendTrafficPolicyNamespaceLister) List(selector labels.Selector) (ret []*v2.BackendTrafficPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v2.BackendTrafficPolicy))
	})
	return ret, err
}

// Get retrieves the BackendTrafficPolicy from the indexer for a given namespace and name.
func (s backendTrafficPolicyNamespaceLister) Get(name string) (*v2.BackendTrafficPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v2.Resource("backendtrafficpolicy"), name)
	}
	return obj.(*v2.BackendTrafficPolicy), nil
}
